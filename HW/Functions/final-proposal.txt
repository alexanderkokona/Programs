CSE 111 Proposal for a Student Chosen Program

    (This is a proposal. All proposals are written with our best
    knowledge at the beginning of a project. As we progress from the
    beginning to the end of a project, we gain more knowledge, and we
    change some of our proposed ideas. This is part of completing any
    project and is fine.  However, we still must write a proposal so
    that our teachers or supervisors know what we intend to do. Please
    answer each of the following questions to the best of your
    knowledge.)

1. What is the title of your program?
"Random Messages of Spiteful Love"

2. What real-world problem will your program address or help to solve?
To help with low self-esteem in students, people who work long hours in 
front of a computer in need of humor, and for breaks monotony, everyday 
three times a day at random times, a desktop notification will pop up on 
the individual's computer with a message that lets the individual know
that they are loved, but through spite. This will add a welcome addition 
of humor and a boost in self-esteem in individuals.

3. What will you learn from developing this program?
How a program interacts with the desktop environment of a windows device and the computers notification system

4. What Python modules will your program use?
random: To generate random messages.
datetime: To work with dates and times to determine when to display notifications.
time: To handle timing and scheduling for displaying notifications.
plyer: To provide a cross-platform Python library for sending desktop notifications.

    (Some examples are: csv, datetime, functools, matplotlib, math,
    pandas, pytest, random, requests, and tkinter.)

5. Will you separate your Python program into functions that each
perform a single task?
Yes

    (Remember that the most reusable functions don't get user input and
    don't print results but instead have parameters and return a result.
    Functions that get user input and print results are important and do
    useful work but are not easily reusable.)

    (Remember also that it's hard to test functions that get user input
    and print results. It's easy to test functions that don't get user
    input and don't print results but instead have parameters and return
    a result. Therefore, you should write most of your program functions
    to have parameters and return a result.)

6. Will you write test functions to test at least two of your program
functions?
Yes